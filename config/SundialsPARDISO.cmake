# -----------------------------------------------------------------
# Programmer:  Raymond Langer @ RWTH Aachen University,
#                               Institute for Combustion Technology
# -----------------------------------------------------------------
# ---------------------------------------------------------------
# PARDISO tests for SUNDIALS CMake-based configuration.

### This is only set if running GUI - simply return first time enabled
IF(PARDISO_DISABLED)
  SET(PARDISO_DISABLED FALSE CACHE INTERNAL "GUI - PARDISO now enabled" FORCE)
  RETURN()
ENDIF()

include(DownloadPardiso)

set(PARDISOTest_DIR ${PROJECT_BINARY_DIR}/PARDISOTest)
file(MAKE_DIRECTORY ${PARDISOTest_DIR})

# Create a CMakeLists.txt file 
file(WRITE ${PARDISOTest_DIR}/CMakeLists.txt
    "cmake_minimum_required(VERSION 3.9)\n"
    "PROJECT(ltest C)\n"
    "SET(CMAKE_VERBOSE_MAKEFILE ON)\n"
    "SET(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n"
    "SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n"
    "SET(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n"
    "SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n"
    "SET(CMAKE_C_FLAGS_RELWITHDEBUGINFO \"${CMAKE_C_FLAGS_RELWITHDEBUGINFO}\")\n"
    "SET(CMAKE_C_FLAGS_MINSIZE \"${CMAKE_C_FLAGS_MINSIZE}\")\n"
    "if (POLICY CMP0012)\n"
    "  cmake_policy(SET CMP0012 NEW)\n"
    "endif ()\n"
    "if(POLICY CMP0054)\n"
    "  cmake_policy(SET CMP0054 NEW)\n"
    "endif()\n"
    "\n"
    "find_package(OpenMP REQUIRED)\n"
    "\n"
    "if(COMMAND cmake_policy)\n"
    "  cmake_policy(SET CMP0003 NEW)\n"
    "endif(COMMAND cmake_policy)\n"
    "ADD_EXECUTABLE(ltest ltest.c)\n"
    "TARGET_LINK_LIBRARIES(ltest \"${PARDISO_DIR}/${PARDISO_NAME}\" \"${PARDISO_LIBRARIES}\")\n"
    "TARGET_LINK_LIBRARIES(ltest OpenMP::OpenMP_C)\n"
    "\n"
    "add_custom_target(ltest_run\n"
    "              COMMAND OMP_NUM_THREADS=1 PARDISO_LIC_PATH=\"${PARDISO_DIR}\" ./ltest\n"
    "              DEPENDS ltest\n"
    "              WORKING_DIRECTORY \"\${CMAKE_CURRENT_BINARY_DIR}\")\n"
    )    
# Create a C source file which calls a couple PARDISO functions
  file(WRITE ${PARDISOTest_DIR}/ltest.c
    "\#include <stdio.h>\n"
    "\#include <stdlib.h>\n"
    "\#include <math.h>\n"
    "\n"
    "\n"
    "/* PARDISO prototype. */\n"
    "void pardisoinit (void   *, int    *,   int *, int *, double *, int *);\n"
    "void pardiso     (void   *, int    *,   int *, int *,    int *, int *, \n"
    "                  double *, int    *,    int *, int *,   int *, int *,\n"
    "                     int *, double *, double *, int *, double *);\n"
    "void pardiso_chkmatrix  (int *, int *, double *, int *, int *, int *);\n"
    "void pardiso_chkvec     (int *, int *, double *, int *);\n"
    "void pardiso_printstats (int *, int *, double *, int *, int *, int *, double *, int *);\n"
    "\n"
    "\n"
    "int main(){\n"
    "/* Matrix data. */\n"
    "int    n = 8;\n"
    "int    ia[ 9] = { 0, 4, 7, 9, 11, 12, 15, 17, 20 };\n"
    "int    ja[20] = { 0,    2,       5, 6, \n"
    "                     1, 2,    4,\n"
    "                        2,             7,\n"
    "                           3,       6,\n"
    "                     1,\n"
    "                        2,       5,    7,\n"
    "                     1,             6,\n"
    "                        2,          6, 7 };\n"
    "double  a[20] = { 7.0,      1.0,           2.0, 7.0, \n"
    "                      -4.0, 8.0,      2.0,\n"
    "                            1.0,                     5.0,\n"
    "                                 7.0,           9.0,\n"
    "                      -4.0,\n"
    "                            7.0,           3.0,      8.0,\n"
    "                       1.0,                    11.0,\n"
    "                           -3.0,                2.0, 5.0 };\n"
    "\n"
    "int      nnz = ia[n];\n"
    "int      mtype = 11;        /* Real unsymmetric matrix */\n"
    "\n"
    "/* RHS and solution vectors. */\n"
    "double   b[8], x[8];\n"
    "int      nrhs = 1;          /* Number of right hand sides. */\n"
    "    void    *pt[64];\n"
    "\n"
    "    /* Pardiso control parameters. */\n"
    "    int      iparm[64];\n"
    "    double   dparm[64];\n"
    "    int      solver;\n"
    "    int      maxfct, mnum, phase, error, msglvl;\n"
    "\n"
    "    /* Number of processors. */\n"
    "    int      num_procs;\n"
    "\n"
    "    /* Auxiliary variables. */\n"
    "    char    *var;\n"
    "    int      i;\n"
    "\n"
    "    double   ddum;              /* Double dummy */\n"
    "    int      idum;              /* Integer dummy. */\n"
    "\n"
    "/* -------------------------------------------------------------------- */\n"
    "/* ..  Setup Pardiso control parameters and initialize the solvers      */\n"
    "/*     internal adress pointers. This is only necessary for the FIRST   */\n"
    "/*     call of the PARDISO solver.                                      */\n"
    "/* ---------------------------------------------------------------------*/\n"
    "      \n"
    "    error = 0;\n"
    "    solver = 0; /* use sparse direct solver */\n"
    "    pardisoinit (pt,  &mtype, &solver, iparm, dparm, &error);\n"
    "\n"
    "    if (error != 0)\n"
    "    {\n"
    "        if (error == -10 )\n"
    "           printf(\"No license file found \\n\");\n"
    "        if (error == -11 )\n"
    "           printf(\"License is expired \\n\");\n"
    "        if (error == -12 )\n"
    "           printf(\"Wrong username or hostname \\n\");\n"
    "         return 1;\n"
    "    }\n"
    "    else\n"
    "        printf(\"[PARDISO]: License check was successful ... \\n\");\n"
    " \n"
    "\n"
    "    /* Numbers of processors, value of OMP_NUM_THREADS */\n"
    "    var = getenv(\"OMP_NUM_THREADS\");\n"
    "    if(var != NULL)\n"
    "        sscanf( var, \"%d\", &num_procs );\n"
    "    else {\n"
    "        num_procs = 1;\n"
    "        printf(\"Set environment OMP_NUM_THREADS to 1\\n\");\n"
    "        return 10;\n"
    "    }\n"
    "    iparm[2]  = num_procs;\n"
    "   \n"
    "    \n"
    "    maxfct = 1;         /* Maximum number of numerical factorizations.  */\n"
    "    mnum   = 1;         /* Which factorization to use. */\n"
    "    \n"
    "    msglvl = 1;         /* Print statistical information  */\n"
    "    error  = 0;         /* Initialize error flag */\n"
    "\n"
    "\n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Convert matrix from 0-based C-notation to Fortran 1-based        */\n"
    "/*     notation.                                                        */\n"
    "/* -------------------------------------------------------------------- */ \n"
    "    for (i = 0; i < n+1; i++) {\n"
    "        ia[i] += 1;\n"
    "    }\n"
    "    for (i = 0; i < nnz; i++) {\n"
    "        ja[i] += 1;\n"
    "    }\n"
    "\n"
    "    /* Set right hand side to one. */\n"
    "    for (i = 0; i < n; i++) {\n"
    "        b[i] = i;\n"
    "    }\n"
    "\n"
    "/* -------------------------------------------------------------------- */\n"
    "/*  .. pardiso_chk_matrix(...)                                          */\n"
    "/*     Checks the consistency of the given matrix.                      */\n"
    "/*     Use this functionality only for debugging purposes               */\n"
    "/* -------------------------------------------------------------------- */\n"
    "    \n"
    "    pardiso_chkmatrix  (&mtype, &n, a, ia, ja, &error);\n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR in consistency of matrix: %d\", error);\n"
    "        exit(1);\n"
    "    }\n"
    "\n"
    "/* -------------------------------------------------------------------- */\n"
    "/* ..  pardiso_chkvec(...)                                              */\n"
    "/*     Checks the given vectors for infinite and NaN values             */\n"
    "/*     Input parameters (see PARDISO user manual for a description):    */\n"
    "/*     Use this functionality only for debugging purposes               */\n"
    "/* -------------------------------------------------------------------- */\n"
    "\n"
    "    pardiso_chkvec (&n, &nrhs, b, &error);\n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR  in right hand side: %d\", error);\n"
    "        exit(1);\n"
    "    }\n"
    "\n"
    "/* -------------------------------------------------------------------- */\n"
    "/* .. pardiso_printstats(...)                                           */\n"
    "/*    prints information on the matrix to STDOUT.                       */\n"
    "/*    Use this functionality only for debugging purposes                */\n"
    "/* -------------------------------------------------------------------- */\n"
    "\n"
    "    pardiso_printstats (&mtype, &n, a, ia, ja, &nrhs, b, &error);\n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR right hand side: %d\", error);\n"
    "        exit(1);\n"
    "    }\n"
    " \n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Reordering and Symbolic Factorization.  This step also allocates */\n"
    "/*     all memory that is necessary for the factorization.              */\n"
    "/* -------------------------------------------------------------------- */ \n"
    "    phase = 11; \n"
    "\n"
    "    pardiso (pt, &maxfct, &mnum, &mtype, &phase,\n"
    "             &n, a, ia, ja, &idum, &nrhs,\n"
    "             iparm, &msglvl, &ddum, &ddum, &error,  dparm);\n"
    "    \n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR during symbolic factorization: %d\", error);\n"
    "        exit(1);\n"
    "    }\n"
    "    printf(\"\\nReordering completed ... \");\n"
    "    printf(\"\\nNumber of nonzeros in factors  = %d\", iparm[17]);\n"
    "    printf(\"\\nNumber of factorization MFLOPS = %d\", iparm[18]);\n"
    "   \n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Numerical factorization.                                         */\n"
    "/* -------------------------------------------------------------------- */    \n"
    "    phase = 22;\n"
    "\n"
    "    pardiso (pt, &maxfct, &mnum, &mtype, &phase,\n"
    "             &n, a, ia, ja, &idum, &nrhs,\n"
    "             iparm, &msglvl, &ddum, &ddum, &error, dparm);\n"
    "   \n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR during numerical factorization: %d\", error);\n"
    "        exit(2);\n"
    "    }\n"
    "    printf(\"\\nFactorization completed ...\\n \");\n"
    "\n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Back substitution and iterative refinement.                      */\n"
    "/* -------------------------------------------------------------------- */    \n"
    "    phase = 33;\n"
    "\n"
    "    iparm[7] = 1;       /* Max numbers of iterative refinement steps. */\n"
    "\n"
    "   \n"
    "    pardiso (pt, &maxfct, &mnum, &mtype, &phase,\n"
    "             &n, a, ia, ja, &idum, &nrhs,\n"
    "             iparm, &msglvl, b, x, &error,  dparm);\n"
    "   \n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR during solution: %d\", error);\n"
    "        exit(3);\n"
    "    }\n"
    "\n"
    "    printf(\"\\nSolve completed ... \");\n"
    "    printf(\"\\nThe solution of the system is: \");\n"
    "    for (i = 0; i < n; i++) {\n"
    "        printf(\"\\n x [%d] = % f\", i, x[i] );\n"
    "    }\n"
    "    printf (\"\\n\");\n"
    "\n"
    "/* -------------------------------------------------------------------- */\n"
    "/* ..  Back substitution with tranposed matrix A^t x=b                   */\n"
    "/* -------------------------------------------------------------------- */\n"
    "    phase = 33;\n"
    "\n"
    "    iparm[7]  = 1;       /* Max numbers of iterative refinement steps. */\n"
    "    iparm[11] = 1;       /* Solving with transpose matrix. */\n"
    "\n"
    "    /* Set right hand side to one. */\n"
    "    for (i = 0; i < n; i++) {\n"
    "        b[i] = 1;\n"
    "    }\n"
    "  \n"
    "    pardiso (pt, &maxfct, &mnum, &mtype, &phase,\n"
    "             &n, a, ia, ja, &idum, &nrhs,\n"
    "             iparm, &msglvl, b, x, &error,  dparm);\n"
    "  \n"
    "    if (error != 0) {\n"
    "        printf(\"\\nERROR during solution: %d\", error);\n"
    "        exit(3);\n"
    "    }\n"
    "\n"
    "    printf(\"\\nSolve completed ... \");\n"
    "    printf(\"\\nThe solution of the system is: \");\n"
    "    for (i = 0; i < n; i++) {\n"
    "        printf(\"\\n x [%d] = % f\", i, x[i] );\n"
    "    }\n"
    "    printf (\"\\n\");\n"
    "\n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Convert matrix back to 0-based C-notation.                       */\n"
    "/* -------------------------------------------------------------------- */ \n"
    "    for (i = 0; i < n+1; i++) {\n"
    "        ia[i] -= 1;\n"
    "    }\n"
    "    for (i = 0; i < nnz; i++) {\n"
    "        ja[i] -= 1;\n"
    "    }\n"
    "\n"
    "/* -------------------------------------------------------------------- */    \n"
    "/* ..  Termination and release of memory.                               */\n"
    "/* -------------------------------------------------------------------- */ \n"
    "    phase = -1;                 /* Release internal memory. */\n"
    "\n"
    "    pardiso (pt, &maxfct, &mnum, &mtype, &phase,\n"
    "             &n, &ddum, ia, ja, &idum, &nrhs,\n"
    "             iparm, &msglvl, &ddum, &ddum, &error,  dparm);\n"
    "    printf (\"SUCCESSFULLYSOLVEDLINEARSYSTEM\\n\");\n"
    "return 0;\n"
    "}\n"
  )
# Attempt to link the "ltest" executable
try_compile(LTEST_OK ${PARDISOTest_DIR} ${PARDISOTest_DIR} ltest OUTPUT_VARIABLE MY_OUTPUT)
### running ltest requies two environment variables:
# This should set the environment variables to appr
#if(NOT DEFINED ENV{PARDISO_LIC_PATH})
#  set(ENV{PARDISO_LIC_PATH} "${PARDISO_DIR}")
#endif()
#if(NOT DEFINED ENV{OMP_NUM_THREADS})
#  set(ENV{OMP_NUM_THREADS} 1)
#endif()

# To ensure we do not use stuff from the previous attempts, 
# we must remove the CMakeFiles directory.
file(REMOVE_RECURSE ${PARDISOTest_DIR}/CMakeFiles)
# Process test result
if(LTEST_OK)
message(STATUS "Checking if PARDISO works... OK")
set(PARDISO_FOUND TRUE)
else(LTEST_OK)
message(STATUS "Checking if PARDISO works... FAILED")
set(PARDISO_FOUND FALSE)
endif(LTEST_OK)
 
  
